import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Alert,
  CircularProgress,
  Chip,
  IconButton,
  Tooltip
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import {
  Add as AddIcon,
  ContentCopy as CopyIcon,
  VpnKey as KeyIcon
} from '@mui/icons-material';
import axios from 'axios';

function KeyManagement() {
  const [keys, setKeys] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [generateKeyOpen, setGenerateKeyOpen] = useState(false);
  const [newKey, setNewKey] = useState('');
  const [expiresInHours, setExpiresInHours] = useState('');

  useEffect(() => {
    fetchKeys();
  }, []);

  const fetchKeys = async () => {
    try {
      const response = await axios.get('/api/admin/keys');
      setKeys(response.data.keys);
    } catch (error) {
      setError('Failed to fetch registration keys');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateKey = async () => {
    try {
      const response = await axios.post('/api/admin/generate-key', {
        expiresInHours: expiresInHours ? parseInt(expiresInHours) : null
      });
      
      setNewKey(response.data.key);
      setSuccess('Registration key generated successfully');
      fetchKeys();
    } catch (error) {
      setError(error.response?.data?.error || 'Failed to generate key');
    }
  };

  const handleCopyKey = (keyValue) => {
    navigator.clipboard.writeText(keyValue);
    setSuccess('Key copied to clipboard');
  };

  const columns = [
    { field: 'id', headerName: 'ID', width: 70 },
    {
      field: 'key_value',
      headerName: 'Registration Key',
      width: 300,
      renderCell: (params) => (
        <Box display="flex" alignItems="center" gap={1}>
          <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
            {params.value}
          </Typography>
          <Tooltip title="Copy key">
            <IconButton
              size="small"
              onClick={() => handleCopyKey(params.value)}
            >
              <CopyIcon fontSize="small" />
            </IconButton>
          </Tooltip>
        </Box>
      ),
    },
    {
      field: 'is_used',
      headerName: 'Status',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value ? 'Used' : 'Available'}
          color={params.value ? 'default' : 'success'}
          size="small"
        />
      ),
    },
    {
      field: 'generated_by_username',
      headerName: 'Generated By',
      width: 150,
    },
    {
      field: 'used_by_username',
      headerName: 'Used By',
      width: 150,
      renderCell: (params) => params.value || '-',
    },
    {
      field: 'expires_at',
      headerName: 'Expires',
      width: 180,
      renderCell: (params) => (
        params.value ? new Date(params.value).toLocaleString() : 'Never'
      ),
    },
    {
      field: 'created_at',
      headerName: 'Created',
      width: 180,
      renderCell: (params) => new Date(params.value).toLocaleString(),
    },
    {
      field: 'used_at',
      headerName: 'Used At',
      width: 180,
      renderCell: (params) => (
        params.value ? new Date(params.value).toLocaleString() : '-'
      ),
    },
  ];

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">
          Registration Key Management
        </Typography>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => setGenerateKeyOpen(true)}
        >
          Generate Key
        </Button>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {success && (
        <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess('')}>
          {success}
        </Alert>
      )}

      {newKey && (
        <Alert 
          severity="info" 
          sx={{ mb: 2 }} 
          action={
            <Button
              color="inherit"
              size="small"
              onClick={() => handleCopyKey(newKey)}
            >
              Copy
            </Button>
          }
        >
          <Box display="flex" alignItems="center" gap={1}>
            <KeyIcon />
            <Typography variant="body2" sx={{ fontFamily: 'monospace' }}>
              {newKey}
            </Typography>
          </Box>
        </Alert>
      )}

      <Box sx={{ height: 600, width: '100%' }}>
        <DataGrid
          rows={keys}
          columns={columns}
          pageSize={10}
          rowsPerPageOptions={[10, 25, 50]}
          disableSelectionOnClick
        />
      </Box>

      {/* Generate Key Dialog */}
      <Dialog open={generateKeyOpen} onClose={() => setGenerateKeyOpen(false)}>
        <DialogTitle>Generate Registration Key</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Expires in hours (optional)"
            type="number"
            fullWidth
            variant="outlined"
            value={expiresInHours}
            onChange={(e) => setExpiresInHours(e.target.value)}
            helperText="Leave empty for no expiration"
            sx={{ mt: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setGenerateKeyOpen(false)}>Cancel</Button>
          <Button onClick={handleGenerateKey} variant="contained">
            Generate Key
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

export default KeyManagement;